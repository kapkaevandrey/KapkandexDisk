name: disk workflow

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -
    - name: Add Poetry to $PATH
      run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Get Poetry version
      run: poetry --version
    - name: Check pyproject.toml validity
      run: poetry check --no-interaction
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction
    - name: Style Testing
      run: | 
        poetry add flake8 pep8-naming flake8-broken-line flake8-return
        poetry run flake8
    - name: Testing
      run: poetry run pytest -v

        
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub backend
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: 15052016/disk:latest
          file: Dockerfile
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v3

      - name: Install OPen VPN
        run: | 
          sudo apt-get install openvpn
          echo "${{ secrets.FILE_OVPN }}" > .github/vpn/config.ovpn

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@master
        id: connect_vpn
        with:
          PING_URL: ${{ secrets.SERVER_HOST }}
          FILE_OVPN: '.github/vpn/config.ovpn'
        env:
          CA_CRT: ${{ secrets.CA_CRT }}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Check Connect VPN
        run: echo ${{ steps.connect_vpn.outputs.STATUS }}

      - name: Copy Docker-compose into server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml"
          target: '~'

      - name: executing remote ssh commands to deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            sudo docker pull 15052016/disk:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            touch .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DATABASE_URL=${{ secrets.DB_ENGINE }}://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}\
            @${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }} >> .env
            echo APP_TITLE=${{ secrets.APP_TITLE }} >> .env
            echo APP_DESCRIPTION=${{ secrets.APP_DESCRIPTION }} >> .env
            echo SECRET=${{ secrets.SECRET }} >> .env
            sudo docker-compose up -d


      - name: kill vpn after deploy
        if: always()
        run: sudo killall openvpn

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!


